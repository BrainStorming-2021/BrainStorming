/*
양의 정수 N 내의 이진 간격은 N의 이진 표현에서 양쪽 끝에 있는 연속 0의 최대 시퀀스입니다.

예를 들어, 숫자 9에는 이진 표현 1001이 있고 길이가 2인 이진 간격을 포함합니다. 숫자 529는 이진 표현 1000010001을 가지며
길이 4 중 하나와 길이 3 중 하나라는 두 개의 이진 간격을 포함합니다. 숫자 20은 이진 표현 10100을 가지며
길이 1의 이진 간격을 포함합니다. 숫자 15는 이진 표현 1111을 가지며 이진 공백이 없습니다. 숫자 32는 이진수 표현 100000을 가지며
이진수 공백이 없습니다.

양의 정수 N이 주어진 경우 가장 긴 이진 간격의 길이를 반환합니다.
N에 이진 간격이 없으면 함수는 0을 반환해야 합니다.

예를 들어 N = 1041이 주어진 경우 N은 이진 표현 10000010001을 가지므로 긴 이진 간격은 길이 5이므로 함수는 5를 반환해야 합니다.
N = 32인 경우 N은 이진 표현 '100000'을 가지므로 이 함수는 0을 반환해야 합니다.

다음 가정에 대해 효율적인 알고리즘을 작성합니다.
 */
/*
    풀이방법

    정수 N을 2진수로 변환하면서
    1과 1사이의 0의 개수를 확인 한다.

    flag로 1의 시작과 끝을 체크한다 확인
 */
fun main(){
    var n = 10
    var i : Int
    var flag = false
    var count = 0
    var max = 0

    //while 문은 참일 경우에만 돈다!
    while(n > 0){
        i = n % 2       //2로 나눈 나머지
        n = n/2        //2로 나눈 몫

        if(flag && i == 0){         //flag 가 true 인 상태에서 0이 나오면 count
            count++
        }else if(flag && i ==1){    //flag 가 true 인 상태에서 1이
            if(max < count){        //기존 값의 count 와 비교
                max = count
            }
            count =0                //count 초기화
        }

        if(i==1){       // 나머지가 1일 경우 flag 를 true 로 수정
            flag=true
        }
    }
    println(max)
}